buildscript {
    ext {
        springBootVersion = "1.5.8.RELEASE"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }


    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.liquibase:liquibase-gradle-plugin:2.0.1"
        // https://mvnrepository.com/artifact/org.liquibase/liquibase-core
//        classpath group: 'org.liquibase', name: 'liquibase-core', version: '3.6.2'

    }
}

allprojects {
    group 'com.windcoder'
    version '1.0-SNAPSHOT'
    apply plugin: 'org.liquibase.gradle'
    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'org.springframework.boot'


    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

    configurations {
        providedRuntime
    }

    repositories {
        maven{url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        maven{url 'https://mvnrepository.com/'}
        mavenLocal()
        mavenCentral()
    }
    dependencies {
//        compile group: 'org.liquibase', name: 'liquibase-core', version: '3.6.2'
        compile fileTree(dir: 'lib', exclude:'', include: '*.jar')
        liquibaseRuntime 'org.liquibase:liquibase-core:3.6.2'
        liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.0.1'
        liquibaseRuntime 'mysql:mysql-connector-java:5.1.34'
    }

}


subprojects {

    sourceSets {
        main {
            java{
                srcDir 'src/main/java'
            }
            resources {
                srcDir 'src/main/java'
                srcDir 'src/main/resources'
            }
        }
    }

    bootRepackage.enabled=false
}



configure(rootProject) {
    description "QY CMS"

    project.ext.baseName = 'qy-cms'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'

    bootRepackage.enabled=true

    springBoot {
        mainClass = "com.windcoder.qycms.QycmsApplication";
        buildInfo()
        executable = true
        embeddedLaunchScriptProperties(mode:"service")
    }
    dependencies {
        compile project(":qycms-core:system-console")
        compile project(":qycms-blog:blog-console")
        compile project(":qycms-blog:blog-web")
    }

    // 生成war时过滤内嵌tomcat依赖
    war {

        rootSpec.exclude("tomcat-embed*.jar")
        rootSpec.exclude("javax.servlet-api*.jar")
        rootSpec.exclude("org.projectlombok:lombok")
    }
    project.ext.liquibaseSQLDir = "${rootProject.projectDir}/db/liquibase"
    project.ext.liquibaseSQLFilePath = "${liquibaseSQLDir}"
    project.ext.liquibaseExcludeSQLFile = ['test1.sql']
    task getMySQLFiles() {
        doLast {
            FileTree mySqlFiles = fileTree(dir: '.',include:'db/**/mysql/**/*.sql')
            StringBuffer stringBuffer = new StringBuffer();
            stringBuffer.append("databaseChangeLog:\n  - changeSet:\n      id: initData \n      author: windcoder \n      changes:\n")
            mySqlFiles.each {File file->
                def mysqlFileName = file.getName()
                if (!liquibaseExcludeSQLFile.contains(mysqlFileName)){
                    def mysqlFilePath = file.getPath()
                    String mysqlRelativeFilePath = mysqlFilePath.substring(mysqlFilePath.indexOf("db\\")).replace('\\','/')
                    println mysqlRelativeFilePath + ","
                    stringBuffer.append("        - sqlFile:\n            encoding: utf8\n            path: "+mysqlRelativeFilePath + "\n")
                }
            }
            def tempDir = "${liquibaseSQLDir}/mysql"
            liquibaseSQLFilePath = "${tempDir}/changelog-mysql-master.yaml"
            File propsFile = new File(tempDir)
            if (propsFile.exists()){
                delete tempDir
            }
            propsFile.mkdir()
            new File("${liquibaseSQLFilePath}").append(stringBuffer.toString())
        }
    }

    task createSql()  {
        doFirst {
            getMySQLFiles.execute()
        }

        doLast {
            File propsFile = new File("${rootProject.projectDir}/qycms-core/common/src/main/resources/application.properties")
            Properties properties = new Properties()
            properties.load(new FileInputStream(propsFile))


            liquibase {
                activities {
                    dev {
//                        changeLogFile "${liquibaseSQLFilePath}"
                        changeLogFile "db/liquibase/changelog-master.yaml"
                        driver "${properties.get('spring.datasource.driver-class-name')}"
                        outputFile "${rootProject.projectDir}/db/test.sql"
                        url "${properties.get('spring.datasource.url')}"
                        username "${properties.get('spring.datasource.username')}"
                        password "${properties.get('spring.datasource.password')}"
                    }
                    runList = "dev" // 这里代表选择哪一个配置 可用参数代替
                }
            }
            updateSQL.execute()
        }

    }

//    tasks.updateSQL.dependsOn createSql




}




